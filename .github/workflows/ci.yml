name: Tests

# Enable Buildkit and let compose use it to speed up image building
#env:
#  DOCKER_BUILDKIT: 1
#  COMPOSE_DOCKER_CLI_BUILD: 1

env:
  DJANGO_DEBUG: True
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"

on:
  pull_request:
    branches: [ "main" ]
    paths-ignore: [ "docs/**", "README.md", "LICENSE", "CONTRIBUTORS.txt", "Justfile", ".readthedocs.yml", ".pre-commit-config.yaml", ".license-tools-config.json", ".gitignore", "mkdocs.yml"]

  push:
    branches: [ "main" ]
    paths-ignore: [ "docs/**", "README.md", "LICENSE", "CONTRIBUTORS.txt", "Justfile", ".readthedocs.yml", ".pre-commit-config.yaml", ".license-tools-config.json", ".gitignore", "mkdocs.yml"]


jobs:
  # With no caching at all the entire ci process takes 4m 30s to complete!
  pytest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.11", "3.12" ]
        django-version: ["5.0", "5.1"]

    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres

    env:
      # postgres://user:password@host:port/database
      DATABASE_URL: "postgres://postgres:postgres@localhost:5432/postgres"

    steps:

    - name: Checkout Code Repository
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true
        cache-dependency-glob: uv.lock

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Setup cache
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version}}-Django-${{ matrix.django-version }}-${{ hashFiles('uv.lock') }}
        restore-keys: venv-${{ runner.os }}-${{ matrix.python-version}}-Django-${{ matrix.django-version }}

    - name: Create venv, install dependencies
      run: |
        uv sync
        source .venv/bin/activate
        echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV

    - name: Test with pytest
      run: |
        uv run --with Django~="${{ matrix.django-version }}.0" manage.py collectstatic --noinput
        uv run --with Django~="${{ matrix.django-version }}.0" -m pytest --cov-report= --cov-config=pyproject.toml --cov=django_quote_service
        uv run --with Django~="${{ matrix.django-version }}.0" -m coverage lcov

#    - name: Submit coverage data to coveralls.io
#      uses: coverallsapp/github-action@master
#      with:
#        github-token: ${{ secrets.GITHUB_TOKEN }}
#        path-to-lcov: "coverage.lcov"
